<div id="particle-canvas-container"></div>

<script>
    // This script will run on the client and create the p5.js sketch

    // A simple particle class
    class Particle {
        constructor(p) {
            this.p = p; // p5 instance
            this.pos = p.createVector(p.random(p.width), p.random(p.height));
            this.vel = p.createVector(0, 0);
            this.acc = p.createVector(0, 0);
            this.maxSpeed = 2;
            this.color = [
                p.random(150, 255),
                p.random(150, 255),
                p.random(150, 255),
                70,
            ];
        }

        update() {
            this.vel.add(this.acc);
            this.vel.limit(this.maxSpeed);
            this.pos.add(this.vel);
            this.acc.mult(0);
        }

        applyForce(force) {
            this.acc.add(force);
        }

        show() {
            this.p.stroke(this.color);
            this.p.strokeWeight(1.5);
            this.p.point(this.pos.x, this.pos.y);
        }

        edges() {
            if (this.pos.x > this.p.width) this.pos.x = 0;
            if (this.pos.x < 0) this.pos.x = this.p.width;
            if (this.pos.y > this.p.height) this.pos.y = 0;
            if (this.pos.y < 0) this.pos.y = this.p.height;
        }

        follow(flowfield) {
            const x = Math.floor(this.pos.x / 20);
            const y = Math.floor(this.pos.y / 20);
            const index = x + y * (this.p.width / 20);
            const force = flowfield[index];
            this.applyForce(force);
        }
    }

    const sketch = (p) => {
        let particles = [];
        let flowfield;
        const particleCount = 300;

        p.setup = () => {
            const container = document.getElementById(
                "particle-canvas-container",
            );
            const canvas = p.createCanvas(
                container.offsetWidth,
                container.offsetHeight,
            );
            canvas.parent(container);

            for (let i = 0; i < particleCount; i++) {
                particles[i] = new Particle(p);
            }
            p.background(239, 241, 245); // Your --base00 color
        };

        p.draw = () => {
            const cols = Math.floor(p.width / 20);
            const rows = Math.floor(p.height / 20);
            flowfield = new Array(cols * rows);
            let yoff = 0;
            for (let y = 0; y < rows; y++) {
                let xoff = 0;
                for (let x = 0; x < cols; x++) {
                    const index = x + y * cols;
                    const angle =
                        p.noise(xoff, yoff, p.frameCount * 0.001) *
                        p.TWO_PI *
                        4;
                    const v = p5.Vector.fromAngle(angle);
                    v.setMag(0.2);
                    flowfield[index] = v;
                    xoff += 0.1;
                }
                yoff += 0.1;
            }

            for (let i = 0; i < particles.length; i++) {
                particles[i].follow(flowfield);
                particles[i].update();
                particles[i].edges();
                particles[i].show();
            }
        };

        p.windowResized = () => {
            const container = document.getElementById(
                "particle-canvas-container",
            );
            p.resizeCanvas(container.offsetWidth, container.offsetHeight);
        };
    };

    // Wait for the p5 object to be available on the window
    // and for the DOM to be ready
    document.addEventListener("DOMContentLoaded", () => {
        if (window.p5) {
            new window.p5(sketch);
        }
    });
</script>

<style>
    #particle-canvas-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }
</style>
